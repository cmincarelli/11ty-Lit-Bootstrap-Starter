---
layout: base.njk
title: Checkout
description: Complete your order with our secure checkout process.
---

<div class="container my-5">
  <div class="row justify-content-center">
    <div class="col-lg-8">
      
      <!-- Checkout Header -->
      <div class="text-center mb-5">
        <h1 class="display-5 fw-bold text-dark">
          <i class="bi bi-cart-check text-primary me-3"></i>Checkout
        </h1>
        <p class="lead text-muted">Complete your order information</p>
      </div>

      <!-- Order Summary Card -->
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">
            <i class="bi bi-receipt me-2"></i>Order Summary
          </h5>
        </div>
        <div class="card-body" id="order-summary">
          <div id="cart-items-display">
            <!-- Cart items will be populated by JavaScript -->
          </div>
          <hr>
          <div class="d-flex justify-content-between mb-2">
            <span>Subtotal:</span>
            <span id="subtotal-display">{{ checkout.currency.symbol }}0.00</span>
          </div>
          {% if checkout.tax.enabled and checkout.tax.percentage > 0 %}
          <div class="d-flex justify-content-between mb-2" id="tax-row">
            <span>{{ checkout.tax.label }} ({{ checkout.tax.percentage }}%):</span>
            <span id="tax-display">{{ checkout.currency.symbol }}0.00</span>
          </div>
          {% endif %}
          <div class="d-flex justify-content-between fw-bold fs-5 text-primary">
            <span>Total:</span>
            <span id="total-display">{{ checkout.currency.symbol }}0.00</span>
          </div>
        </div>
      </div>

      <!-- Customer Information Form -->
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-success text-white">
          <h5 class="mb-0">
            <i class="bi bi-person-fill me-2"></i>Customer Information
          </h5>
        </div>
        <div class="card-body">
          
          <form id="checkout-form" novalidate>
            <div class="row">
              <div class="col-md-12 mb-3">
                <label for="fullName" class="form-label">Full Name *</label>
                <input type="text" class="form-control" id="fullName" name="fullName" required>
                <div class="invalid-feedback">
                  Please provide your full name.
                </div>
              </div>
            </div>
            
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="email" class="form-label">Email Address *</label>
                <input type="email" class="form-control" id="email" name="email" required>
                <div class="invalid-feedback">
                  Please provide a valid email address.
                </div>
              </div>
              <div class="col-md-6 mb-3">
                <label for="phone" class="form-label">Phone Number *</label>
                <input type="tel" class="form-control" id="phone" name="phone" required>
                <div class="invalid-feedback">
                  Please provide your phone number.
                </div>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="address" class="form-label">Address *</label>
              <textarea class="form-control" id="address" name="address" rows="3" required></textarea>
              <div class="invalid-feedback">
                Please provide your address.
              </div>
            </div>

            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
              <a href="/" class="btn btn-outline-secondary btn-lg me-md-2">
                <i class="bi bi-arrow-left me-2"></i>Back to Shopping
              </a>
              <button type="submit" class="btn btn-primary btn-lg" id="submit-order">
                <i class="bi bi-check-circle me-2"></i>Place Order
              </button>
            </div>
          </form>
          
        </div>
      </div>

      <!-- Success Message (Hidden by default) -->
      <div class="card shadow-sm border-success d-none" id="success-message">
        <div class="card-header bg-success text-white text-center">
          <h5 class="mb-0">
            <i class="bi bi-check-circle-fill me-2"></i>Order Submitted Successfully!
          </h5>
        </div>
        <div class="card-body text-center">
          <div class="mb-3">
            <i class="bi bi-hourglass-split text-success" style="font-size: 3rem;"></i>
          </div>
          <h4 class="text-success mb-3" id="queue-message">
            You are order <span id="queue-position">1</span>
          </h4>
          <p class="lead text-muted mb-4">
            {{ checkout.orderQueue.message | replace("{threshold}", checkout.orderQueue.threshold) }}
          </p>
          <div class="d-grid gap-2 d-md-flex justify-content-md-center">
            <a href="/" class="btn btn-primary btn-lg">
              <i class="bi bi-house me-2"></i>Return to Home
            </a>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

<style>
.cart-item-checkout {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 0;
  border-bottom: 1px solid #e9ecef;
}

.cart-item-checkout:last-child {
  border-bottom: none;
}

.item-details h6 {
  margin: 0;
  color: #495057;
}

.item-details small {
  color: #6c757d;
}

.size-badge-checkout {
  background: rgba(13,110,253,0.1);
  color: #0d6efd;
  padding: 0.2rem 0.4rem;
  border-radius: 3px;
  font-size: 0.75rem;
  margin-left: 0.5rem;
}

.item-price-checkout {
  font-weight: 600;
  color: #198754;
}

.loading-spinner {
  display: inline-block;
  width: 1rem;
  height: 1rem;
  border: 2px solid #ffffff;
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}
</style>

<script>
// Inject checkout configuration for JavaScript access
window.checkoutConfig = {{ checkout | dump | safe }};

document.addEventListener('DOMContentLoaded', function() {
  loadCartData();
  initializeCheckoutForm();
});

function loadCartData() {
  try {
    const cartData = localStorage.getItem('roastcode_cart');
    if (!cartData) {
      showEmptyCart();
      return;
    }

    const cart = JSON.parse(cartData);
    if (!cart.items || cart.items.length === 0) {
      showEmptyCart();
      return;
    }

    displayCartItems(cart.items);
    displayTotals(cart.total || 0);
  } catch (error) {
    console.error('Error loading cart data:', error);
    showEmptyCart();
  }
}

function showEmptyCart() {
  document.getElementById('cart-items-display').innerHTML = 
    '<div class="text-center py-4"><i class="bi bi-cart-x text-muted" style="font-size: 3rem;"></i><p class="text-muted mt-3">Your cart is empty</p><a href="/" class="btn btn-primary">Continue Shopping</a></div>';
  document.getElementById('checkout-form').style.display = 'none';
}

function displayCartItems(items) {
  const container = document.getElementById('cart-items-display');
  const config = window.checkoutConfig;
  const symbol = config.currency.symbol;
  const decimals = config.currency.decimals;
  
  container.innerHTML = items.map(item => {
    let attributeBadges = '';
    if (item.attributes) {
      // Display all attributes
      attributeBadges = Object.entries(item.attributes)
        .map(([key, value]) => `<span class="size-badge-checkout">${key}: ${value}</span>`)
        .join('');
    } else if (item.size) {
      // Fallback for legacy items with size property
      attributeBadges = `<span class="size-badge-checkout">Size: ${item.size}</span>`;
    }
    
    return `
    <div class="cart-item-checkout">
      <div class="item-details">
        <h6>${item.name}${attributeBadges}</h6>
        <small>Quantity: ${item.quantity} Ã— ${symbol}${item.price.toFixed(decimals)}</small>
      </div>
      <div class="item-price-checkout">
        ${symbol}${(item.price * item.quantity).toFixed(decimals)}
      </div>
    </div>
    `;
  }).join('');
}

function displayTotals(subtotal) {
  const config = window.checkoutConfig;
  const tax = (config.tax.enabled && config.tax.percentage > 0) ? subtotal * config.tax.rate : 0;
  const total = subtotal + tax;
  
  const symbol = config.currency.symbol;
  const decimals = config.currency.decimals;
  
  document.getElementById('subtotal-display').textContent = `${symbol}${subtotal.toFixed(decimals)}`;
  if (config.tax.enabled && config.tax.percentage > 0) {
    const taxElement = document.getElementById('tax-display');
    if (taxElement) {
      taxElement.textContent = `${symbol}${tax.toFixed(decimals)}`;
    }
  }
  document.getElementById('total-display').textContent = `${symbol}${total.toFixed(decimals)}`;
}

function initializeCheckoutForm() {
  const form = document.getElementById('checkout-form');
  const submitBtn = document.getElementById('submit-order');
  
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (!form.checkValidity()) {
      e.stopPropagation();
      form.classList.add('was-validated');
      return;
    }

    // Show loading state
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="loading-spinner me-2"></span>Processing...';

    try {
      // Get form data
      const formData = new FormData(form);
      const customerData = {
        name: formData.get('fullName'),
        email: formData.get('email'),
        phone: formData.get('phone'),
        address: formData.get('address')
      };

      // Get cart data
      const cartData = JSON.parse(localStorage.getItem('roastcode_cart') || '{}');
      
      // Simulate API call with mock response
      const response = await mockApiCall(customerData, cartData);
      
      if (response.success) {
        // Clear cart
        localStorage.removeItem('roastcode_cart');
        
        // Show success message
        showSuccessMessage(response.queuePosition);
      } else {
        throw new Error(response.message || 'Order submission failed');
      }
      
    } catch (error) {
      console.error('Checkout error:', error);
      alert('There was an error processing your order. Please try again.');
    } finally {
      // Reset button
      submitBtn.disabled = false;
      submitBtn.innerHTML = originalText;
    }
  });
}

function mockApiCall(customerData, cartData) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        success: true,
        queuePosition: Math.floor(Math.random() * 25) + 1,
        message: "Order submitted successfully"
      });
    }, 1500); // Simulate network delay
  });
}

function showSuccessMessage(queuePosition) {
  // Hide form sections
  document.querySelector('.card:has(#order-summary)').style.display = 'none';
  document.querySelector('.card:has(#checkout-form)').style.display = 'none';
  
  // Update and show success message
  document.getElementById('queue-position').textContent = queuePosition;
  document.getElementById('success-message').classList.remove('d-none');
  
  // Scroll to success message
  document.getElementById('success-message').scrollIntoView({ behavior: 'smooth' });
}
</script>